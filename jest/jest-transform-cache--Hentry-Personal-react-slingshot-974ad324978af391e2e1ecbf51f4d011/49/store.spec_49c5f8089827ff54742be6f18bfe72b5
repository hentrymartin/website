/* istanbul ignore next */'use strict';var /* istanbul ignore next */_actionTypes = require('../constants/actionTypes'); /* istanbul ignore next */var ActionTypes = _interopRequireWildcard(_actionTypes);

var /* istanbul ignore next */_mockdate = require('mockdate'); /* istanbul ignore next */var _mockdate2 = _interopRequireDefault(_mockdate);
var /* istanbul ignore next */_redux = require('redux');

var /* istanbul ignore next */_fuelSavingsCalculator = require('../utils/fuelSavingsCalculator'); /* istanbul ignore next */var _fuelSavingsCalculator2 = _interopRequireDefault(_fuelSavingsCalculator);
var /* istanbul ignore next */_dateHelper = require('../utils/dateHelper');
var /* istanbul ignore next */_initialState = require('../reducers/initialState'); /* istanbul ignore next */var _initialState2 = _interopRequireDefault(_initialState);
var /* istanbul ignore next */_reducers = require('../reducers'); /* istanbul ignore next */var _reducers2 = _interopRequireDefault(_reducers);function _interopRequireDefault(obj) {return obj && obj.__esModule ? obj : { default: obj };}function _interopRequireWildcard(obj) {if (obj && obj.__esModule) {return obj;} else {var newObj = {};if (obj != null) {for (var key in obj) {if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key];}}newObj.default = obj;return newObj;}}

describe('Store', function () {
  var dateModified = /* istanbul ignore next */void 0;
  beforeAll(function () {
    // hardcoded date for consistency in tests and snapshots on all machines
    /* istanbul ignore next */_mockdate2.default.set(new Date("1/31 23:14:01"));
    dateModified = /* istanbul ignore next */(0, _dateHelper.getFormattedDateTime)();
  });
  afterAll(function () /* istanbul ignore next */{return (/* istanbul ignore next */_mockdate2.default.reset());});

  it('should display results when necessary data is provided', function () {
    var store = /* istanbul ignore next */(0, _redux.createStore)( /* istanbul ignore next */_reducers2.default, /* istanbul ignore next */_initialState2.default);

    var actions = [
    { type: ActionTypes.CALCULATE_FUEL_SAVINGS, dateModified: dateModified, settings: store.getState(), fieldName: 'newMpg', value: 20 },
    { type: ActionTypes.CALCULATE_FUEL_SAVINGS, dateModified: dateModified, settings: store.getState(), fieldName: 'tradeMpg', value: 10 },
    { type: ActionTypes.CALCULATE_FUEL_SAVINGS, dateModified: dateModified, settings: store.getState(), fieldName: 'newPpg', value: 1.50 },
    { type: ActionTypes.CALCULATE_FUEL_SAVINGS, dateModified: dateModified, settings: store.getState(), fieldName: 'tradePpg', value: 1.50 },
    { type: ActionTypes.CALCULATE_FUEL_SAVINGS, dateModified: dateModified, settings: store.getState(), fieldName: 'milesDriven', value: 100 },
    { type: ActionTypes.CALCULATE_FUEL_SAVINGS, dateModified: dateModified, settings: store.getState(), fieldName: 'milesDrivenTimeframe', value: 'month' }];

    actions.forEach(function (action) /* istanbul ignore next */{return store.dispatch(action);});

    var actual = store.getState();
    var expected = {
      newMpg: 20,
      tradeMpg: 10,
      newPpg: 1.50,
      tradePpg: 1.50,
      milesDriven: 100,
      milesDrivenTimeframe: 'month',
      displayResults: false,
      dateModified: dateModified,
      necessaryDataIsProvidedToCalculateSavings: true,
      savings: /* istanbul ignore next */(0, _fuelSavingsCalculator2.default)().calculateSavings(store.getState().fuelSavings) };


    expect(actual.fuelSavings).toEqual(expected);
  });

  it('should not display results when necessary data is not provided', function () {
    var store = /* istanbul ignore next */(0, _redux.createStore)( /* istanbul ignore next */_reducers2.default, /* istanbul ignore next */_initialState2.default);

    var actions = [
    { type: ActionTypes.CALCULATE_FUEL_SAVINGS, dateModified: dateModified, settings: store.getState(), fieldName: 'newMpg', value: 20 },
    { type: ActionTypes.CALCULATE_FUEL_SAVINGS, dateModified: dateModified, settings: store.getState(), fieldName: 'tradeMpg', value: 10 },
    // { type: ActionTypes.CALCULATE_FUEL_SAVINGS, dateModified, settings: store.getState(), fieldName: 'newPpg', value: 1.50 },
    { type: ActionTypes.CALCULATE_FUEL_SAVINGS, dateModified: dateModified, settings: store.getState(), fieldName: 'tradePpg', value: 1.50 },
    { type: ActionTypes.CALCULATE_FUEL_SAVINGS, dateModified: dateModified, settings: store.getState(), fieldName: 'milesDriven', value: 100 },
    { type: ActionTypes.CALCULATE_FUEL_SAVINGS, dateModified: dateModified, settings: store.getState(), fieldName: 'milesDrivenTimeframe', value: 'month' }];


    actions.forEach(function (action) /* istanbul ignore next */{return store.dispatch(action);});

    var actual = store.getState();

    var expected = {
      newMpg: 20,
      tradeMpg: 10,
      newPpg: '',
      tradePpg: 1.5,
      milesDriven: 100,
      milesDrivenTimeframe: 'month',
      displayResults: false,
      dateModified: dateModified,
      necessaryDataIsProvidedToCalculateSavings: false,
      savings: { annual: 0, monthly: 0, threeYear: 0 } };



    expect(actual.fuelSavings).toEqual(expected);
  });


  it('should handle a flurry of actions', function () {
    var store = /* istanbul ignore next */(0, _redux.createStore)( /* istanbul ignore next */_reducers2.default, /* istanbul ignore next */_initialState2.default);

    var actions = [
    { type: ActionTypes.CALCULATE_FUEL_SAVINGS, dateModified: dateModified, settings: store.getState(), fieldName: 'newMpg', value: 20 },
    { type: ActionTypes.CALCULATE_FUEL_SAVINGS, dateModified: dateModified, settings: store.getState(), fieldName: 'tradeMpg', value: 10 },
    { type: ActionTypes.CALCULATE_FUEL_SAVINGS, dateModified: dateModified, settings: store.getState(), fieldName: 'newPpg', value: 1.50 },
    { type: ActionTypes.CALCULATE_FUEL_SAVINGS, dateModified: dateModified, settings: store.getState(), fieldName: 'tradePpg', value: 1.50 },
    { type: ActionTypes.CALCULATE_FUEL_SAVINGS, dateModified: dateModified, settings: store.getState(), fieldName: 'milesDriven', value: 100 },
    { type: ActionTypes.CALCULATE_FUEL_SAVINGS, dateModified: dateModified, settings: store.getState(), fieldName: 'milesDrivenTimeframe', value: 'month' },
    { type: ActionTypes.CALCULATE_FUEL_SAVINGS, dateModified: dateModified, settings: store.getState(), fieldName: 'newMpg', value: 20 },
    { type: ActionTypes.CALCULATE_FUEL_SAVINGS, dateModified: dateModified, settings: store.getState(), fieldName: 'tradeMpg', value: 10 },
    { type: ActionTypes.CALCULATE_FUEL_SAVINGS, dateModified: dateModified, settings: store.getState(), fieldName: 'newPpg', value: 1.50 },
    { type: ActionTypes.SAVE_FUEL_SAVINGS, dateModified: dateModified, settings: store.getState() },
    { type: ActionTypes.CALCULATE_FUEL_SAVINGS, dateModified: dateModified, settings: store.getState(), fieldName: 'tradePpg', value: 1.50 },
    { type: ActionTypes.CALCULATE_FUEL_SAVINGS, dateModified: dateModified, settings: store.getState(), fieldName: 'milesDriven', value: 100 },
    { type: ActionTypes.CALCULATE_FUEL_SAVINGS, dateModified: dateModified, settings: store.getState(), fieldName: 'milesDrivenTimeframe', value: 'week' },
    { type: ActionTypes.CALCULATE_FUEL_SAVINGS, dateModified: dateModified, settings: store.getState(), fieldName: 'newMpg', value: 20 },
    { type: ActionTypes.CALCULATE_FUEL_SAVINGS, dateModified: dateModified, settings: store.getState(), fieldName: 'tradeMpg', value: 10 },
    { type: ActionTypes.CALCULATE_FUEL_SAVINGS, dateModified: dateModified, settings: store.getState(), fieldName: 'newPpg', value: 1.50 }];

    actions.forEach(function (action) /* istanbul ignore next */{return store.dispatch(action);});

    /* istanbul ignore next */(0, _fuelSavingsCalculator2.default)().calculateSavings(store.getState().fuelSavings);

    var moreActions = [
    { type: ActionTypes.CALCULATE_FUEL_SAVINGS, dateModified: dateModified, settings: store.getState(), fieldName: 'tradePpg', value: 0 },
    { type: ActionTypes.CALCULATE_FUEL_SAVINGS, dateModified: dateModified, settings: store.getState(), fieldName: 'milesDriven', value: 100 },
    { type: ActionTypes.CALCULATE_FUEL_SAVINGS, dateModified: dateModified, settings: store.getState(), fieldName: 'milesDrivenTimeframe', value: 'year' }];


    moreActions.forEach(function (action) /* istanbul ignore next */{return store.dispatch(action);});

    var actual = store.getState();
    //const expected = {
    //  newMpg: 20,
    //  tradeMpg: 10,
    //  newPpg: 1.50,
    //  tradePpg: 0,
    //  milesDriven: 100,
    //  milesDrivenTimeframe: 'year',
    //  displayResults: false,
    //  dateModified,
    //  necessaryDataIsProvidedToCalculateSavings: false,
    //  savings: lastGoodSavings
    //};
    //
    //expect(actual.fuelSavings).toEqual(expected);

    // with jest snapshots the above assertion can be replaced with this one line
    // jest will store the value in a file within ./__snapshots__
    // snapshots can/should be committed and reviewed
    // jest will also update snapshot or delete unused ones using the command `npm run test -- -u`
    expect(actual.fuelSavings).toMatchSnapshot();
  });
});