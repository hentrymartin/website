/* istanbul ignore next */'use strict';Object.defineProperty(exports, "__esModule", { value: true });var /* istanbul ignore next */_mathHelper = require('./mathHelper'); /* istanbul ignore next */var _mathHelper2 = _interopRequireDefault(_mathHelper);
var /* istanbul ignore next */_numberFormatter = require('./numberFormatter'); /* istanbul ignore next */var _numberFormatter2 = _interopRequireDefault(_numberFormatter);function _interopRequireDefault(obj) {return obj && obj.__esModule ? obj : { default: obj };}

// This file uses the factory function pattern instead of a class.
// Just showing an alternative to using a class.
// This declares a function with a private method.
// The public function returns an object literal.
// Could arguably be called FuelSavingCalculatorFactory.
var fuelSavingsCalculator = function fuelSavingsCalculator() {
  // private
  var calculateMonthlyCost = function calculateMonthlyCost(milesDrivenPerMonth, ppg, mpg) {
    var gallonsUsedPerMonth = milesDrivenPerMonth / mpg;
    return gallonsUsedPerMonth * ppg;
  };

  // public
  return {
    calculateMilesDrivenPerMonth: function /* istanbul ignore next */calculateMilesDrivenPerMonth(milesDriven, milesDrivenTimeframe) {
      var monthsPerYear = 12;
      var weeksPerYear = 52;

      switch (milesDrivenTimeframe) {
        case 'week':
          return milesDriven * weeksPerYear / monthsPerYear;
        case 'month':
          return milesDriven;
        case 'year':
          return milesDriven / monthsPerYear;
        default:
          throw new Error( /* istanbul ignore next */'Unknown milesDrivenTimeframe passed: ' + milesDrivenTimeframe);}

    },

    calculateSavingsPerMonth: function /* istanbul ignore next */calculateSavingsPerMonth(settings) {
      if (!settings.milesDriven) {
        return 0;
      }

      var milesDrivenPerMonth = this.calculateMilesDrivenPerMonth(settings.milesDriven, settings.milesDrivenTimeframe);
      var tradeFuelCostPerMonth = calculateMonthlyCost(milesDrivenPerMonth, settings.tradePpg, settings.tradeMpg);
      var newFuelCostPerMonth = calculateMonthlyCost(milesDrivenPerMonth, settings.newPpg, settings.newMpg);
      var savingsPerMonth = tradeFuelCostPerMonth - newFuelCostPerMonth;

      return (/* istanbul ignore next */_mathHelper2.default.roundNumber(savingsPerMonth, 2));
    },


    necessaryDataIsProvidedToCalculateSavings: function /* istanbul ignore next */necessaryDataIsProvidedToCalculateSavings(settings) {
      return settings.newMpg > 0 &&
      settings.tradeMpg > 0 &&
      settings.newPpg > 0 &&
      settings.tradePpg > 0 &&
      settings.milesDriven > 0;
    },

    calculateSavings: function /* istanbul ignore next */calculateSavings(settings) {
      var monthlySavings = this.calculateSavingsPerMonth(settings);

      return {
        monthly: /* istanbul ignore next */_numberFormatter2.default.getCurrencyFormattedNumber(monthlySavings),
        annual: /* istanbul ignore next */_numberFormatter2.default.getCurrencyFormattedNumber(monthlySavings * 12),
        threeYear: /* istanbul ignore next */_numberFormatter2.default.getCurrencyFormattedNumber(monthlySavings * 12 * 3) };

    } };

}; /* istanbul ignore next */exports.default =

fuelSavingsCalculator;