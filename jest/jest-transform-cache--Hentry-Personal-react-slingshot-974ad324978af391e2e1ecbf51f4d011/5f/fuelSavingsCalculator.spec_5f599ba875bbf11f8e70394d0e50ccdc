/* istanbul ignore next */'use strict';var /* istanbul ignore next */_fuelSavingsCalculator = require('./fuelSavingsCalculator'); /* istanbul ignore next */var _fuelSavingsCalculator2 = _interopRequireDefault(_fuelSavingsCalculator);function _interopRequireDefault(obj) {return obj && obj.__esModule ? obj : { default: obj };}

describe('Fuel Savings Calculator', function () {
  describe('necessaryDataIsProvidedToCalculateSavings', function () {
    it('returns false when necessary data isn\'t provided', function () {
      // arrange
      var settings = {
        newMpg: 20 };


      // assert
      expect( /* istanbul ignore next */(0, _fuelSavingsCalculator2.default)().necessaryDataIsProvidedToCalculateSavings(settings)).toEqual(false);
    });

    it('returns true when necessary data is provided', function () {
      // arrange
      var settings = {
        newMpg: 20,
        tradeMpg: 10,
        newPpg: 1.50,
        tradePpg: 1.50,
        milesDriven: 100 };


      // assert
      expect( /* istanbul ignore next */(0, _fuelSavingsCalculator2.default)().necessaryDataIsProvidedToCalculateSavings(settings)).toEqual(true);
    });
  });

  describe('milesPerMonth', function () {
    it('converts a weekly timeframe to a monthly timeframe', function () {
      // arrange
      var milesPerWeek = 100;

      // act
      var milesPerMonth = /* istanbul ignore next */(0, _fuelSavingsCalculator2.default)().calculateMilesDrivenPerMonth(milesPerWeek, 'week');

      // assert
      expect(milesPerMonth).toEqual(433.3333333333333);
    });

    it('returns a monthly timeframe untouched', function () {
      // arrange
      var milesPerMonth = 300;

      // act
      var milesPerMonthCalculated = /* istanbul ignore next */(0, _fuelSavingsCalculator2.default)().calculateMilesDrivenPerMonth(milesPerMonth, 'month');

      // assert
      expect(milesPerMonthCalculated).toEqual(milesPerMonth);
    });

    it('converts a yearly timeframe to a monthly timeframe', function () {
      // arrange
      var milesPerYear = 1200;

      // act
      var milesPerMonth = /* istanbul ignore next */(0, _fuelSavingsCalculator2.default)().calculateMilesDrivenPerMonth(milesPerYear, 'year');

      // assert
      expect(milesPerMonth).toEqual(100);
    });

    it('throws an error on invalid timeFrame', function () {
      // arrange
      var milesPerYear = 1200;

      // act & assert
      expect(function () /* istanbul ignore next */{return (/* istanbul ignore next */(0, _fuelSavingsCalculator2.default)().calculateMilesDrivenPerMonth(milesPerYear, 'minute'));}).toThrow('Unknown milesDrivenTimeframe passed: minute');
    });
  });

  describe('calculateSavingsPerMonth', function () {
    it('returns 29.93 in savings per month with these settings', function () {
      // arrange
      var settings = {
        tradePpg: 3.75,
        tradeMpg: 24,
        newPpg: 3.75,
        newMpg: 38,
        milesDriven: 120,
        milesDrivenTimeframe: 'week' };


      // act
      var savingsPerMonth = /* istanbul ignore next */(0, _fuelSavingsCalculator2.default)().calculateSavingsPerMonth(settings);

      // assert
      expect(savingsPerMonth).toEqual(29.93);
    });

    it('returns 40.83 in savings per month with these settings', function () {
      // arrange
      var settings = {
        tradePpg: 4.15,
        tradeMpg: 24,
        newPpg: 3.75,
        newMpg: 38,
        milesDriven: 550,
        milesDrivenTimeframe: 'month' };


      // act
      var savingsPerMonth = /* istanbul ignore next */(0, _fuelSavingsCalculator2.default)().calculateSavingsPerMonth(settings);

      // assert
      expect(savingsPerMonth).toEqual(40.83);
    });

    it('returns -157.12 in loss per month with these settings', function () {
      // arrange
      var settings = {
        tradePpg: 3.15,
        tradeMpg: 40,
        newPpg: 3.75,
        newMpg: 18,
        milesDriven: 14550,
        milesDrivenTimeframe: 'year' };


      // act
      var savingsPerMonth = /* istanbul ignore next */(0, _fuelSavingsCalculator2.default)().calculateSavingsPerMonth(settings);

      // assert
      expect(savingsPerMonth).toEqual(-157.12);
    });

    it('returns 0 per month with these settings', function () {
      // arrange
      var settings = {
        tradePpg: 3.15,
        tradeMpg: 40,
        newPpg: 3.75,
        newMpg: 18,
        milesDriven: 0,
        milesDrivenTimeframe: 'year' };


      // act
      var savingsPerMonth = /* istanbul ignore next */(0, _fuelSavingsCalculator2.default)().calculateSavingsPerMonth(settings);

      // assert
      expect(savingsPerMonth).toEqual(0);
    });
  });
});