/* istanbul ignore next */'use strict';Object.defineProperty(exports, "__esModule", { value: true });var _createClass = function () {function defineProperties(target, props) {for (var i = 0; i < props.length; i++) {var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if ("value" in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);}}return function (Constructor, protoProps, staticProps) {if (protoProps) defineProperties(Constructor.prototype, protoProps);if (staticProps) defineProperties(Constructor, staticProps);return Constructor;};}();var /* istanbul ignore next */_mathHelper = require('./mathHelper'); /* istanbul ignore next */var _mathHelper2 = _interopRequireDefault(_mathHelper);function _interopRequireDefault(obj) {return obj && obj.__esModule ? obj : { default: obj };}function _classCallCheck(instance, Constructor) {if (!(instance instanceof Constructor)) {throw new TypeError("Cannot call a class as a function");}}var

NumberFormatter = function () {function NumberFormatter() {_classCallCheck(this, NumberFormatter);}_createClass(NumberFormatter, null, [{ key: 'getCurrencyFormattedNumber', value: function getCurrencyFormattedNumber(
    value) {
      if (value === null) {
        return '';
      }

      return '$' + this.getFormattedNumber(value); // eslint-disable-line prefer-template
    } }, { key: 'getFormattedNumber', value: function getFormattedNumber(

    value) {
      if (value === 0) {
        return 0;
      }

      if (!value) {
        return '';
      }

      if (!this.isInt(this.scrubFormatting(value))) {
        return ''; // if it's not a number after scrubbing formatting, just return empty.
      }

      var roundedValue = /* istanbul ignore next */_mathHelper2.default.roundNumber(value, 2); // round if more than 2 decimal points
      roundedValue = roundedValue.toString().replace(/\B(?=(\d{3})+(?!\d))/g, ','); // add commas for 1,000's. RegEx from http://stackoverflow.com/questions/2901102/how-to-print-a-number-with-commas-as-thousands-separators-in-javascript
      var roundedValueContainsDecimalPlace = roundedValue.indexOf('.') !== -1;

      if (roundedValueContainsDecimalPlace) {
        var numbersToTheRightOfDecimal = roundedValue.split('.')[1];

        switch (numbersToTheRightOfDecimal.length) {
          case 0:
            return roundedValue.replace('.', ''); // no decimal necessary since no numbers after decimal
          case 1:
            return (/* istanbul ignore next */roundedValue + '0');
          default:
            return roundedValue;}

      }
      return roundedValue;
    } }, { key: 'isInt', value: function isInt(

    n) {
      if (n === '' || n === null) {
        return false;
      }

      return n % 1 === 0;
    } }, { key: 'scrubFormatting', value: function scrubFormatting(

    value) {
      return value.toString().replace('$', '').replace(',', '').replace('.', '');
    } }]);return NumberFormatter;}(); /* istanbul ignore next */exports.default =


NumberFormatter;